@startuml

top to bottom direction

interface AlgorithmInfoDaoService << interface >> {
  + updateAlgorithmParamsInBatch(List<AlgorithmInfoParamDto>): int
  + getAlgorithmInfoConvertObjectByTypeAndOriginalId(int, int): List<AlgorithmInfo>
  + getAlgorithmInfoById(int): List<DesensitizationAlgorithm>
  + getAlgorithmInfoConvertObjectByTypeAndOriginalId(AlgorithmType, int): List<AlgorithmInfo>
  + getAlgorithmInfoByTypeAndOriginalId(AlgorithmType, int): List<DesensitizationAlgorithm>
  + updateAlgorithmParams(AlgorithmInfo): int
  + updateAlgorithmParams(int, String, String, String): int
  + getAlgorithmInfoConvertObjectById(int): List<AlgorithmInfo>
  + getAlgorithmInfoByTypeAndOriginalId(int, int): List<DesensitizationAlgorithm>
   allAlgorithmInfoConvertObject: List<AlgorithmInfo>
   allAlgorithmInfoMap: Map<String, AlgorithmInfo>
   allAlgorithmInfoDisplay: List<AlgorithmDisplayInfoDto>
   allAlgorithmInfoConvertObjectFromRawInfo: List<AlgorithmInfo>
   allAlgorithmsRawInfo: List<DesensitizationAlgorithm>
}

class ParamsManagementController {
  + ParamsManagementController(ParamsManagementService, AlgorithmInfoDaoService):
  - validateParams(DesensitizationAlgorithm, AlgorithmInfoParamDto): String
  ~ returnPage(): String
  + updateAlgorithmParamsInBatch(List<AlgorithmInfoParamDto>): Result<?>
  - parseParams(String): List<Double>
  + reloadAlgorithmFactory(): Result<?>
   allAlgorithmInfoDisplay: Result<List<AlgorithmDisplayInfoDto>>
}

interface ParamsManagementService << interface >> {
  + updateAlgorithmParamsInBatch(List<AlgorithmInfoParamDto>): int
  + reloadAlgorithmFactory(): boolean
   algorithmMap: Map<String, AlgorithmInfo>
   allAlgorithmInfoDisplay: List<AlgorithmDisplayInfoDto>
}

ParamsManagementController --> ParamsManagementService : uses
ParamsManagementController --> AlgorithmInfoDaoService : uses

@enduml
